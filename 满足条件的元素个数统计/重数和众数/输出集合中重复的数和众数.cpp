#include<iostream>
//众数是出现最多的数，重数是其出现的次数
//问题描述：
//给定含有n个元素的多重集合S，每个元素在S中出现的次数称为该元素的重数。多重集S中重数最大的元素称为众数。
//例如，S = { 1，2，2，2，3，5 }。多重集S的众数是2，其重数为3。
//编程任务：
//对于给定的由n 个自然数组成的多重集S，编程计算S 的众数及其重数。
//输入
//第1行多重集S中元素个数n(n <= 50000)；接下来的n 行中，每行有一个自然数。
//输出
//输出文件有2 行，第1 行给出众数，第2 行是重数。(如果有多个众数，只输出最小的)
using namespace std;

int main(){
	int n, max = 1, max_num;
	cin >> n;
	int ch[50000], is[50000];
	//采用两个数组一对一的模式，辅助数组is用来计算对应下标的ch数组元素出现的次数，默认为一次 
	for(int i = 0; i<n; i++){
		is[i] = 1;
		cin >> ch[i];
	}
	
	//利用冒泡法遍历数组，将辅助数组is的元素值矫正为ch数组中元素出现的次数 
	for(int i = 0; i<n-1; i++){
		for(int j = i+1; j<n; j++){
			if(ch[i] == ch[j]){
				is[i]++;
			}
		}
	}
	//循环遍历is数组，找出出现次数最多的ch元素下标i，和ch[i]的值，即为正确答案 
	for(int i = 0; i<n; i++){
		if(is[i]>max){
			max = is[i];
			max_num = ch[i];
		}
	}
	//输出结果 
	cout << endl << max_num << endl << max;

	return 0;
} 
